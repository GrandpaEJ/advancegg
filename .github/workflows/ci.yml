name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Test Go core library
  test-go:
    name: 🔧 Test Go Core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.20', '1.21']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./...

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: go
          name: go-coverage

  # Build and test native libraries
  test-native-build:
    name: 🔨 Test Native Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            goos: linux
            goarch: amd64
          - os: windows-latest
            platform: windows-x64
            goos: windows
            goarch: amd64
          - os: macos-latest
            platform: darwin-x64
            goos: darwin
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build native library
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          
          # Determine file extension
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT=".dll"
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            EXT=".dylib"
          else
            EXT=".so"
          fi
          
          # Build shared library
          go build -buildmode=c-shared \
            -ldflags="-s -w" \
            -o "dist/advancegg-${{ matrix.platform }}${EXT}" \
            ecosystem/python/advancegg_python.go
          
          # Verify build
          ls -la dist/
          file "dist/advancegg-${{ matrix.platform }}${EXT}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: native-${{ matrix.platform }}
          path: dist/advancegg-${{ matrix.platform }}*
          retention-days: 1

  # Test Python ecosystem
  test-python:
    name: 🐍 Test Python
    needs: test-native-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download native library
        uses: actions/download-artifact@v3
        with:
          name: native-${{ runner.os == 'Linux' && 'linux-x64' || runner.os == 'Windows' && 'windows-x64' || 'darwin-x64' }}
          path: ecosystem/python/advancegg/native

      - name: Install Python package
        run: |
          cd ecosystem/python
          pip install -e .[dev]

      - name: Run Python tests
        run: |
          cd ecosystem/python
          python -m pytest tests/ -v --cov=advancegg --cov-report=xml

      - name: Test CLI tools
        run: |
          advancegg-info
          advancegg-benchmark || echo "Benchmark may fail in CI environment"

      - name: Upload Python coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./ecosystem/python/coverage.xml
          flags: python
          name: python-coverage

  # Test Node.js ecosystem
  test-nodejs:
    name: 🟨 Test Node.js
    needs: test-native-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
        exclude:
          # Reduce matrix size
          - os: windows-latest
            node-version: '16'
          - os: macos-latest
            node-version: '16'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ecosystem/nodejs/package-lock.json

      - name: Download native library
        uses: actions/download-artifact@v3
        with:
          name: native-${{ runner.os == 'Linux' && 'linux-x64' || runner.os == 'Windows' && 'windows-x64' || 'darwin-x64' }}
          path: ecosystem/nodejs/native

      - name: Install Node.js dependencies
        run: |
          cd ecosystem/nodejs
          npm ci

      - name: Run Node.js tests
        run: |
          cd ecosystem/nodejs
          npm test

      - name: Test CLI tools
        run: |
          cd ecosystem/nodejs
          node scripts/info.js
          node scripts/benchmark.js || echo "Benchmark may fail in CI environment"

      - name: Test TypeScript definitions
        run: |
          cd ecosystem/nodejs
          npx tsc --noEmit index.d.ts

  # Security and quality checks
  security:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Setup Python for security scan
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Python security scan
        run: |
          pip install safety bandit
          cd ecosystem/python
          safety check
          bandit -r advancegg/ -f json -o bandit-report.json || true

      - name: Setup Node.js for security scan
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Node.js security audit
        run: |
          cd ecosystem/nodejs
          npm audit --audit-level=moderate

  # Documentation and examples
  test-docs:
    name: 📚 Test Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test documentation build
        run: |
          # Test if documentation can be built
          echo "📚 Documentation build test would go here"
          
          # Validate markdown files
          find docs/ -name "*.md" -exec echo "Checking {}" \;

      - name: Test examples
        run: |
          # Test example files for syntax errors
          find examples/ -name "*.go" -exec go fmt {} \;
          find ecosystem/python/examples/ -name "*.py" -exec python -m py_compile {} \;
          find ecosystem/nodejs/examples/ -name "*.js" -exec node -c {} \;

  # Performance benchmarks
  benchmark:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -count=3 ./... > benchmark.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'go'
          output-file-path: benchmark.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: false

  # Build status summary
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [test-go, test-native-build, test-python, test-nodejs, security, test-docs]
    if: always()
    steps:
      - name: Analyze CI results
        id: analyze
        run: |
          echo "📊 Analyzing CI results..."

          # Count successes and failures
          TOTAL=0
          SUCCESS=0
          FAILED=0
          SKIPPED=0

          # Check each job result
          declare -A jobs=(
            ["Go Tests"]="${{ needs.test-go.result }}"
            ["Native Build"]="${{ needs.test-native-build.result }}"
            ["Python Tests"]="${{ needs.test-python.result }}"
            ["Node.js Tests"]="${{ needs.test-nodejs.result }}"
            ["Security Scan"]="${{ needs.security.result }}"
            ["Documentation"]="${{ needs.test-docs.result }}"
          )

          echo "📋 Job Results:"
          for job in "${!jobs[@]}"; do
            result="${jobs[$job]}"
            TOTAL=$((TOTAL + 1))

            case "$result" in
              "success")
                echo "  ✅ $job: Success"
                SUCCESS=$((SUCCESS + 1))
                ;;
              "failure")
                echo "  ❌ $job: Failed"
                FAILED=$((FAILED + 1))
                ;;
              "cancelled")
                echo "  🚫 $job: Cancelled"
                SKIPPED=$((SKIPPED + 1))
                ;;
              "skipped")
                echo "  ⏭️ $job: Skipped"
                SKIPPED=$((SKIPPED + 1))
                ;;
              *)
                echo "  ❓ $job: Unknown ($result)"
                FAILED=$((FAILED + 1))
                ;;
            esac
          done

          echo ""
          echo "📊 Summary: $SUCCESS/$TOTAL passed, $FAILED failed, $SKIPPED skipped"

          # Set outputs
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

          # Determine overall status
          if [ $FAILED -eq 0 ]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
          elif [ $SUCCESS -gt $FAILED ]; then
            echo "overall_status=partial" >> $GITHUB_OUTPUT
          else
            echo "overall_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Success notification
        if: steps.analyze.outputs.overall_status == 'success'
        run: |
          echo "🎉 All CI checks passed!"
          echo "✅ ${{ steps.analyze.outputs.success }}/${{ steps.analyze.outputs.total }} jobs successful"
          echo ""
          echo "🚀 Ready for:"
          echo "   - Merging pull requests"
          echo "   - Creating releases"
          echo "   - Deploying to production"

      - name: Partial success notification
        if: steps.analyze.outputs.overall_status == 'partial'
        run: |
          echo "⚠️ CI completed with some issues"
          echo "📊 Results: ${{ steps.analyze.outputs.success }} passed, ${{ steps.analyze.outputs.failed }} failed"
          echo ""
          echo "🔍 Review failed jobs and consider:"
          echo "   - Fixing failing tests"
          echo "   - Updating dependencies"
          echo "   - Checking platform compatibility"
          echo ""
          echo "💡 Some failures may be acceptable for development branches"

      - name: Failure notification
        if: steps.analyze.outputs.overall_status == 'failure'
        run: |
          echo "❌ CI checks failed"
          echo "📊 Results: ${{ steps.analyze.outputs.success }} passed, ${{ steps.analyze.outputs.failed }} failed"
          echo ""
          echo "🚫 Not ready for:"
          echo "   - Merging to main branch"
          echo "   - Creating releases"
          echo "   - Production deployment"
          echo ""
          echo "🔧 Next steps:"
          echo "   1. Review failed job logs"
          echo "   2. Fix identified issues"
          echo "   3. Push fixes and re-run CI"

          # Only exit with error for main branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo ""
            echo "❌ Failing CI on main branch"
            exit 1
          else
            echo ""
            echo "⚠️ Allowing failure on non-main branch"
          fi
