name: 🔒 Security & Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'ecosystem/python/requirements.txt'
      - 'ecosystem/python/setup.py'
      - 'ecosystem/nodejs/package.json'
      - 'ecosystem/nodejs/package-lock.json'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Vulnerability scanning
  vulnerability-scan:
    name: 🛡️ Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go vulnerability check
        run: |
          echo "🔍 Running Go vulnerability check..."

          if go install golang.org/x/vuln/cmd/govulncheck@latest; then
            echo "✅ govulncheck installed"
          else
            echo "❌ Failed to install govulncheck"
            exit 1
          fi

          if govulncheck ./...; then
            echo "✅ No Go vulnerabilities found"
          else
            echo "⚠️ Go vulnerabilities detected - check output above"
            # Don't fail the job, just warn
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Python security scan
        run: |
          echo "🐍 Running Python security scan..."

          # Install security tools with error handling
          if pip install safety bandit; then
            echo "✅ Security tools installed"
          else
            echo "❌ Failed to install security tools"
            exit 1
          fi

          # Install semgrep separately as it might fail
          pip install semgrep || echo "⚠️ Failed to install semgrep, skipping advanced scan"

          cd ecosystem/python

          # Check for known vulnerabilities
          echo "🔍 Checking for known vulnerabilities..."
          if safety check --json --output safety-report.json; then
            echo "✅ No known vulnerabilities found"
          else
            echo "⚠️ Vulnerabilities detected - check safety-report.json"
          fi

          # Static analysis for security issues
          echo "🔍 Running static security analysis..."
          if [ -d "advancegg/" ]; then
            if bandit -r advancegg/ -f json -o bandit-report.json; then
              echo "✅ No security issues found by bandit"
            else
              echo "⚠️ Security issues detected - check bandit-report.json"
            fi
          else
            echo "⚠️ advancegg/ directory not found, skipping bandit scan"
            echo '{"results": [], "metrics": {"_totals": {"nosec": 0, "skipped_tests": 0}}}' > bandit-report.json
          fi

          # Advanced security scanning (optional)
          if command -v semgrep >/dev/null 2>&1; then
            echo "🔍 Running advanced security scan..."
            if semgrep --config=auto --json --output=semgrep-report.json . 2>/dev/null; then
              echo "✅ Advanced scan completed"
            else
              echo "⚠️ Advanced scan had issues"
              echo '{"results": []}' > semgrep-report.json
            fi
          else
            echo "⚠️ Semgrep not available, skipping advanced scan"
            echo '{"results": []}' > semgrep-report.json
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Node.js security audit
        run: |
          cd ecosystem/nodejs
          
          # Install dependencies
          npm ci
          
          # Run security audit
          npm audit --json > npm-audit.json || true
          
          # Check for outdated packages
          npm outdated --json > npm-outdated.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            ecosystem/python/safety-report.json
            ecosystem/python/bandit-report.json
            ecosystem/python/semgrep-report.json
            ecosystem/nodejs/npm-audit.json
            ecosystem/nodejs/npm-outdated.json
          retention-days: 30

      - name: Create security issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = '🚨 Security vulnerabilities detected';
            const body = `
            Security scan detected potential vulnerabilities.
            
            **Scan Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            
            Please review the security reports and take appropriate action.
            
            **Next Steps:**
            1. Download security reports from the workflow artifacts
            2. Review each vulnerability
            3. Update dependencies as needed
            4. Re-run security scan to verify fixes
            
            **Auto-generated by security workflow**
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security vulnerabilities detected')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'bug', 'priority-high']
              });
            }

  # Dependency updates
  dependency-update:
    name: 📦 Dependency Update
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Update Go dependencies
        run: |
          # Update Go modules
          go get -u ./...
          go mod tidy
          
          # Check if there are changes
          if git diff --quiet go.mod go.sum; then
            echo "No Go dependency updates available"
            echo "go_updated=false" >> $GITHUB_ENV
          else
            echo "Go dependencies updated"
            echo "go_updated=true" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update Python dependencies
        run: |
          cd ecosystem/python
          
          # Install pip-tools for dependency management
          pip install pip-tools
          
          # Update requirements if they exist
          if [ -f "requirements.in" ]; then
            pip-compile --upgrade requirements.in
          fi
          
          # Check for setup.py dependency updates
          if git diff --quiet requirements.txt setup.py; then
            echo "No Python dependency updates available"
            echo "python_updated=false" >> $GITHUB_ENV
          else
            echo "Python dependencies updated"
            echo "python_updated=true" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update Node.js dependencies
        run: |
          cd ecosystem/nodejs
          
          # Update dependencies
          npm update
          
          # Check if there are changes
          if git diff --quiet package.json package-lock.json; then
            echo "No Node.js dependency updates available"
            echo "nodejs_updated=false" >> $GITHUB_ENV
          else
            echo "Node.js dependencies updated"
            echo "nodejs_updated=true" >> $GITHUB_ENV
          fi

      - name: Run tests after updates
        if: env.go_updated == 'true' || env.python_updated == 'true' || env.nodejs_updated == 'true'
        run: |
          # Run Go tests
          if [ "${{ env.go_updated }}" = "true" ]; then
            go test ./...
          fi
          
          # Run Python tests
          if [ "${{ env.python_updated }}" = "true" ]; then
            cd ecosystem/python
            pip install -e .[dev]
            python -m pytest tests/ || echo "Python tests failed"
            cd ../..
          fi
          
          # Run Node.js tests
          if [ "${{ env.nodejs_updated }}" = "true" ]; then
            cd ecosystem/nodejs
            npm ci
            npm test || echo "Node.js tests failed"
            cd ../..
          fi

      - name: Create Pull Request
        if: env.go_updated == 'true' || env.python_updated == 'true' || env.nodejs_updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 Update dependencies
            
            - Go modules: ${{ env.go_updated == 'true' && 'Updated' || 'No changes' }}
            - Python packages: ${{ env.python_updated == 'true' && 'Updated' || 'No changes' }}
            - Node.js packages: ${{ env.nodejs_updated == 'true' && 'Updated' || 'No changes' }}
            
            Auto-generated by dependency update workflow
          title: '🔄 Automated dependency updates'
          body: |
            ## Dependency Updates
            
            This PR contains automated dependency updates:
            
            - **Go modules:** ${{ env.go_updated == 'true' && '✅ Updated' || '⏭️ No changes' }}
            - **Python packages:** ${{ env.python_updated == 'true' && '✅ Updated' || '⏭️ No changes' }}
            - **Node.js packages:** ${{ env.nodejs_updated == 'true' && '✅ Updated' || '⏭️ No changes' }}
            
            ### Testing Status
            
            - Tests have been run automatically
            - Please review changes before merging
            - Check for any breaking changes in updated dependencies
            
            ### Security
            
            - All updates include security patches where available
            - Run security scan after merging to verify improvements
            
            **Auto-generated by dependency update workflow**
          branch: automated/dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
            maintenance

  # License compliance check
  license-check:
    name: ⚖️ License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install license checker
        run: |
          go install github.com/google/licensecheck/cmd/licensecheck@latest

      - name: Check Go licenses
        run: |
          # Check licenses of Go dependencies
          go mod download
          licensecheck -c .licensecheck.yml ./... > go-licenses.txt || true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check Python licenses
        run: |
          pip install pip-licenses
          cd ecosystem/python
          pip install -e .
          pip-licenses --format=json --output-file=python-licenses.json

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check Node.js licenses
        run: |
          cd ecosystem/nodejs
          npm ci
          npx license-checker --json --out nodejs-licenses.json

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            go-licenses.txt
            ecosystem/python/python-licenses.json
            ecosystem/nodejs/nodejs-licenses.json
          retention-days: 30

  # Code quality metrics
  quality-metrics:
    name: 📊 Quality Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install quality tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Run Go quality checks
        run: |
          # Linting
          golangci-lint run --out-format=json > golangci-report.json || true
          
          # Cyclomatic complexity
          gocyclo -over 15 . > gocyclo-report.txt || true
          
          # Code coverage
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Python quality checks
        run: |
          pip install flake8 mypy black isort radon
          cd ecosystem/python
          
          # Style checking
          flake8 advancegg/ --output-file=flake8-report.txt || true
          
          # Type checking
          mypy advancegg/ --json-report mypy-report || true
          
          # Code complexity
          radon cc advancegg/ --json > radon-report.json || true

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            golangci-report.json
            gocyclo-report.txt
            coverage.html
            ecosystem/python/flake8-report.txt
            ecosystem/python/mypy-report/
            ecosystem/python/radon-report.json
          retention-days: 30
